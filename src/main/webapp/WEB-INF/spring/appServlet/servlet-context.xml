<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- RequestMapping을 사용할 수 있게 한다 무조건 있어야하는 아이! -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- webapp 아래의 resources안에 있는 파일들을 매핑한다 -->
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/res/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<!-- Tiles 설정 파일  -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
			</beans:list>
		</beans:property>	
	</beans:bean>
	
	<beans:bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
				destroy-method="close">
				<!-- class에 명시된 클래스의 close메소드를 호출 -->
		<beans:constructor-arg ref="hikariConfig"></beans:constructor-arg>
	</beans:bean>
	
	<beans:bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
    <beans:property name="poolName" value="springHikariCP" />
    <beans:property name="connectionTestQuery" value="SELECT 1" />
    <beans:property name="dataSourceClassName" value="${hibernate.dataSourceClassName}" />
    <beans:property name="maximumPoolSize" value="${hibernate.hikari.maximumPoolSize}" />
    <beans:property name="idleTimeout" value="${hibernate.hikari.idleTimeout}" />

    <beans:property name="dataSourceProperties">
        <beans:props>
            <beans:prop key="url">${dataSource.url}</beans:prop>
            <beans:prop key="user">${dataSource.username}</beans:prop>
            <beans:prop key="password">${dataSource.password}</beans:prop>
        </beans:props>
    </beans:property>
	</beans:bean>
	
	<!-- 무조건 있어야하는 아이!! -->
	<context:component-scan base-package="com.spring.board" />
	
</beans:beans>
